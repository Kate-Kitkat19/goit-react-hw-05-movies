{"version":3,"file":"static/js/591.0c1dbec3.chunk.js","mappings":"mTAEMA,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,6GAENC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAHd,cAEvBG,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO9BC,QAAQC,MAAM,gCAPgB,yDAAH,qDAWjBC,EAAa,mCAAG,WAAMC,GAAN,gFACrBC,EAAkBD,EAAME,OAAOC,cADV,kBAGFV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BU,EAD3B,gCAHE,cAGnBP,EAHmB,yBAMlBA,EAASC,KAAKC,SANI,gCAQ1BC,QAAQC,MAAM,gCARY,yDAAH,sDAYbM,EAAY,mCAAG,WAAMC,GAAN,gGAEDZ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDe,EADC,oBACad,EADb,oBAFC,cAElBG,EAFkB,yBAKjBA,EAASC,MALQ,gCAOzBE,QAAQC,MAAM,gCAPW,yDAAH,sDAWZQ,EAAY,mCAAG,WAAMD,GAAN,gGAEDZ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDe,EADC,4BACqBd,EADrB,oBAFC,cAElBG,EAFkB,yBAKjBA,EAASC,KAAKY,MALG,gCAOzBV,QAAQC,MAAM,gCAPW,yDAAH,sDAWZU,EAAe,mCAAG,WAAMH,GAAN,gGAEJZ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDe,EADC,4BACqBd,EADrB,2BAFI,cAErBG,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAO5BC,QAAQC,MAAM,gCAPc,yDAAH,qD,2HChDfW,E,QAAcC,GAAAA,GAAH,0J,SCCXC,EAAgB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9B,OACE,SAACH,EAAD,UACGG,EAAQC,KAAI,SAAAC,GACX,IAAQC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,QAASX,EAAOS,EAAPT,GACzB,OACE,2BACE,yCAAeU,MACf,uBAAIC,MAFGX,EAKZ,KAGN,ECQD,EAnBgB,WACd,OAA8BY,EAAAA,EAAAA,UAAS,IAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRb,EAAAA,EAAAA,IAAgBW,GAASG,KAAKJ,EAC/B,GAAE,CAACC,KAGF,yBACGP,EAAQW,OAAS,GAChB,SAACZ,EAAD,CAAeC,QAASA,KAExB,iDAIP,C","sources":["API/MovieDB.js","components/Reviews/Reviews.styled.js","components/Reviews/ListOfReviews.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'ebab474729c7a7a042d3e1e294ace7e8';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n   console.error('Sorry, something went wrong!');\n  }\n};\n\nexport const getMovieByKey = async query => {\n  const normalizedQuery = query.trim().toLowerCase();\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${KEY}&query=${normalizedQuery}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n   console.error('Sorry, something went wrong!');\n  }\n};\n\nexport const getMoviebyId = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}?api_key=${KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n   console.error('Sorry, something went wrong!');\n  }\n};\n\nexport const getMovieCast = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n   console.error('Sorry, something went wrong!');\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n   console.error('Sorry, something went wrong!');\n  }\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  max-width: 1200px;\n`;\n","import { ReviewsList } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nexport const ListOfReviews = ({ reviews }) => {\n  return (\n    <ReviewsList>\n      {reviews.map(review => {\n        const { author, content, id } = review;\n        return (\n          <li key={id}>\n            <p>{`Author: ${author}`}</p>\n            <p>{content}</p>\n          </li>\n        );\n      })}\n    </ReviewsList>\n  );\n};\n\nListOfReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { getMovieReviews } from 'API/MovieDB';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { ListOfReviews } from './ListOfReviews';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <ListOfReviews reviews={reviews} />\n      ) : (\n        <p>There are no reviews</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","KEY","getTrendingMovies","axios","response","data","results","console","error","getMovieByKey","query","normalizedQuery","trim","toLowerCase","getMoviebyId","id","getMovieCast","cast","getMovieReviews","ReviewsList","styled","ListOfReviews","reviews","map","review","author","content","useState","setReviews","movieId","useParams","useEffect","then","length"],"sourceRoot":""}